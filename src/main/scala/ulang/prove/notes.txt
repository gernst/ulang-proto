

True represents truth
equational reasoning: refl, trans, subst (congruence closure)
using definitions and universal quantifiers (rewriting)
case distinction on the construction of expressions and size function
induction, coinduction

lemma "modus ponens"
  A and (A ==> B) ==> B;
end

lemma
  not exists n: Nat.
    forall m: Nat. m < n;

  // rewrites to
  // assume forall m: Nat. m < n;
  // assert False;
proof
  instantiate m with n +1;
end

define
  n + 0 = n;
  n + (m +1) = (n + m) +1;
end

inductive
  x: a and y: b and p = (x, y) 
    ==> p: a * b;

  (forall x: a. f x: b)
    ==> f: a -> b;
end

lemma
  (x, y): a * b
    <=> x: a and y: b;

  x: a and f: a -> b
    ==> f x: b;
end

lemma
  (+): Nat * Nat -> Nat;

  // equivalently:
  n: Nat and m: Nat
    ==> n + m: Nat;
end

inductive
  0: Nat;
  +1: Nat -> Nat;

  Nil: List a;
  Cons: a * List a -> List a;
end

lemma
  // automatically pick the first inductive definition from the assumptions
  n: Nat
    ==> 0 + n = n;
  
  n: Nat and m: Nat
    ==> (m +1) + n = n + (m +1);
   
  n: Nat and m: Nat
    ==> n + m = m + n;
  
  n: Nat and m: Nat and k: Nat
    ==> (n + m) + k = n + (m + k);
end
