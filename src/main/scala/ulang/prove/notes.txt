
theorem
  k : Nat ==> Zero + k = k;
proof induction // k : Nat implicit: can pattern match
  | Zero : Nat -> sorry
  | ... -> refine // add necessary assumption not to get to this case?
  | Succ m : Nat -> sorry;
end

Inductive hypotheses:

theorem
  I (t x) ==> Q (s x y) // I is inductive
end

Hyp n
  = all x' y'.
      t x' < t y' and I (t x') ==> Q (s x' y')


True represents truth
equational reasoning: refl, trans, subst (congruence closure from lambda calculus confluence)
using definitions and universal quantifiers (rewriting)
case distinction on the construction of expressions and size function
induction, coinduction

all theorems and lemmas are just expressions
- equations are considered as rewrite rules
- everything else is considered as an axiom/theorem that this should be true

the notation for definitions and lemmas should be exactly the same?

basic patterns
_ and x matches anything, the latter binds to x
C matches the constant C
f p1 pn matches an n-ary function application, including the function itself
how do varargs work?

open
how to match constants?
should it be possible to match function literals?

definition
  n + 0 = n;
  n + (m +1) = (n + m) +1;
end

definition
  # f p1 ... pn = # f + # p1 + ... + # pn;
  # _ = 1;
end

inductive definition
  0: Nat;
  n: Nat ==> n +1: Nat;
end

inductive theorem
  0: Nat;
  1: Nat;
  n: Nat ==> n + 2: Nat;
end

inductive theorem
  n: Nat and (forall m: Nat. n < m ==> p m) 
    ==> p n
end

lemma
  // automatically pick the first inductive definition from the assumptions
  n: Nat
    ==> 0 + n = n;
  
  n: Nat and m: Nat
    ==> (m +1) + n = n + (m +1);
   
  n: Nat and m: Nat
    ==> n + m = m + n;
  
  n: Nat and m: Nat and k: Nat
    ==> (n + m) + k = n + (m + k);
end
