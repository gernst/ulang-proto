notation
  infix 6 :;
  infix right 9 .;
end

definition
  id x = x;
  const x = \y -> x;
  apply f a = f a;
  
  curry   f = \x -> \y ->  f x y;
  uncurry f = \x y -> (f x) y;
  tupled  f = \(x, y) -> f x y;
  
  g . f = \x -> g (f x);
  
  ite True  a b = a;
  ite False a b = b;
end

test
  id A = A;
  (const A) B = A;
  (if True  then X else Y) = X;
  (if False then X else Y) = Y;
end

eval
  (A,B,C);
end

import
  bool nat option list;

definition
  flatmap f xs = flatten (map f xs);
end
