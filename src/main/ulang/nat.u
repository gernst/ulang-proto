notation
  data 0 +1;
  
  postfix 11 +1 -1;
  infix right 10 ^;
  infix left 9 * / %;
  infix left 8 + -;
  infix 6 < <= >= >;
end

define
  1 = 0 +1;
  2 = 0 +1 +1;
  3 = 0 +1 +1 +1;
  4 = 0 +1 +1 +1 +1;
  (n +1) -1 = n;

  m + 0 = m;
  m + (n +1) = (m + n) +1;
  m - 0 = m;
  m - (n +1) = (m - n) -1;
  
  m * 0 = 0;
  m * (n +1) = (m * n) + m;
  
  div m n // if (n != 0)
    = if n > m
      then (0, m)
      else let (d, r) = div (m - n) n
      in (d +1, r);

  m / n = let (d, _) = div m n in d;
  m % n = let (_, r) = div m n in r;
    
  n ^ 0 = 1;
  n ^ (m +1) = n * (n ^ m);

  0 < 0 <=> False;
  0 < n +1 <=> True;
  m +1 < 0 <=> False;
  m +1 < n +1 <=> m < n;

  0 <= n <=> True;
  m +1 <= 0 <=> False;
  m +1 <= n +1 <=> m <= n;
  
  n > m <=> m < n;
  n >= m <=> m <= n;
  
  even  0 = True;
  even (n +1) = odd n;

  odd  0 = False;
  odd (n +1) = even n;
end

test
  0 + 0 = 0;
  0 + 1 = 1;
  1 + 0 = 1;
  0 + 2 = 2;
  1 + 1 = 2;
  2 + 0 = 2;
  1 + 2 = 3;
  2 + 1 = 3;
  2 + 2 = 4;
end