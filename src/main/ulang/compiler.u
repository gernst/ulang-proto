define
  debruijn e
    = debruijn e [];

  debruijn (Const z) stack
    = Const z;

  debruijn (Var x) stack
    = match index x stack with
         | Some i -> Var i;
  
  debruijn (Let x e b) stack
    = Let (debruijn e stack) (debruijn b [x; stack]);

  debruijn (App f a) stack
    = App (debruijn f stack) (debruijn a stack);
    
  debruijn (If a b c) stack
    = If (debruijn a stack) (debruijn b stack) (debruijn c stack);
  
  debruijn (Lambda x b) stack
    = Lambda (debruijn b [x; stack]);
    
    
  beta (Const z)
    = Const z;

  beta (Var i)
    = (Var i);
    
  beta (App (Lambda b) a)
    = Let (beta a) (beta b);
  
  beta (App f a)
    = App (beta f) (beta a);

  beta (If a b c)
    = If (beta a) (beta b) (beta c);
    
  beta (Lambda b)
    = Lambda (beta b);
    
    
  compile (Const z)
    = [Const z];
  
  compile (Var i)
    = [Load i];
    
  compile (Let a b)
    = compile a ++ [Store] ++ compile b;

  compile (App f a)
    = compile a ++ compile f ++ [Apply];
    
  compile (If a b c)
    = compile a ++ [Test (compile b) (compile c)];
    
  compile (Lambda b)
    = [ Close (compile b ++ [Return]) ];
  
    
  exec [] env [x; stack]
    = x;
  
  exec [Const x; code] env stack
    = exec code env [x; stack];
    
  exec [Store; code] env [x; stack]
    = exec code [x; env] stack;
    
  exec [Load i; code] env stack
    = match get i env with
       | Some x -> exec code env [x; stack];

  exec [Close c; code] env stack
    = exec code env [Closure c env; stack];
    
  exec [Apply; code] env [Closure c e, x; stack]
    = exec c [x; e] [Cont code env; stack];
    
  exec [Return; _] env [x, Cont c e; stack]
    = exec c e [x; stack];
  
  ulang e = compile (beta (debruijn e));
  //  ulang e = (compile . beta . debruijn) e;
    
  
  prog = (App (Lambda X (Var X)) (Const Y)); 
end

eval
  let code = print (ulang prog)
  in exec code [] [];
end

define
  step (Const x, code, env,     stack)
    =  (         code, env, [x; stack]);
    
  step (Store, code,     env, [x; stack])
    =  (       code, [x; env],    stack);
    
  step (Load i, code, env,     stack)
    = match get i env with
       | Some x ->
       (        code, env, [x; stack]);

  step (Close c, code, env,                 stack)
    =  (         code, env, [Closure c env; stack]);
    
  step (Apply, code,     env, [Closure c e, x; stack])
    =  (          c,  [x; e], [Cont code env;  stack]);
    
  step (Test b c, code, env, [a; stack])
    =  (if a then b else c, env, stack);
    
  step (Return, _, env, [x, Cont c e; stack])
    =  (        c,   e, [x;           stack]);
    
  steps ([], env, [x; stack])
    = x;
  steps ([stm; code], env, stack)
    = steps (step (stm, code, env, stack));

end