notation
  data 0 +1;
  postfix 11 +1 -1;
  prefix 5 not;
  infix left  4 and;
  infix left  3 or;
  infix right 2 ==>;
  infix 5 :;
  infix 7 +;
  binder forall exists;
end

definition
  id x = x;
  test A = X;
  test B = Y;
  (not True) = False;
  (not False) = True;
  (x = x) = True;
  (x = y) = False;
  1 = 0 +1;
  (forall) f = (f = \x -> True);
end

test
  X = X;
  not X = Y;
end

theorem
  X = Y;
  forall x -> True;
  (\x y -> A x) y = \z -> (A y);
end

definition
  (not False) = True;
  (not True)  = False;
end

inductive definition
  False : Bool;
  True  : Bool;
end

theorem
  b : Bool
    ==> (not not b) = b;
proof induction b : Bool
  | False : Bool -> trivial
  | True  : Bool -> trivial;
end

inductive definition
  0 : Nat;
  n : Nat ==> n +1 : Nat;
end

theorem
  (A ==> B) ==> C;
  A and B ==> A;
  id A = A;
  test a;
  test A;
  True : Bool;
  False : Bool;
  n : Nat ==> n +1 : Nat;
  (F a b x) = (F a d z) ==> False;
end

definition
  n + 0 = n;
  n + (m +1) = (n + m) +1;
end

theorem
  1 + 1 = 0 +1 +1;
end

theorem
  k : Nat ==> 0 + k = k;
proof induction k : Nat
  | 0 : Nat -> sorry
  | m +1 : Nat -> sorry;
end
