define
  True:  Bool
  False: Bool
  
  Nil: List a
  Cons: a, List a -> List a  
end


apply f a = f a

bind (Var x)    v e = e + (x -> v)
bind (App f a) (

eval (Const v) e = v
eval (Var x)   e = lookup e x
eval (App f a) e = apply (eval f e) (eval a e)
eval (Abs p b) e = \v. eval b (bind p v e)


grammar
  foo = ...
end

language
  <rule name> <f: state -> state>


inductive
  True:  Bool;
  False: Bool;
end

inductive
  _: Nat
where // missing: disjointness of freely generated types (!)
  0: Nat;
  n: Nat ==> n +1: Nat;
  // induction principle for m: Nat ==> P m
  // for induction on m: Nat where
  // base: m: Nat // original assumption
           m = 0  // matching m: Nat and conclusion 0: Nat modulo _: Nat
             ==> P m
  // rec:  m: Nat
           m = n +1
           n: Nat // assumption from the generation of n +1
          (n: Nat ==> P n) // hypothesis 
             ==> P m
end

data
  List a = [] | a :: (List a);
  Tree a = Leaf | Node (Tree a) a (Tree a);
end

type
  Map a b = List (a * b);
end

inductive
  even 0;
  even n ==> even (n + 2);
end

lemma
  not even 1;
proof
  even 1 ==> False;
  induction even 1;
  (even n ==> False) and n + 2 = 1 ==> False
  even 1 and even 1 = even 0 ==> False;
  even 1 and (forall n. even 1 = even n

inductive
  []: List a;

  x: a and xs: List a
    ==> (x :: xs): List a;
end

// must be built in for every arity!
inductive
  (forall x. x: a ==> f x: b)
    ==> f: a -> b;
end

// also better built in
inductive
  x: a ==> x = x;
end