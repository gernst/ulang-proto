import base;

define
  test p@(x,y) == p;
  test l@(x :: y) == l;
end

eval
  flatten [[A, B], [C, D]];
  flatten (Some (Some A));
  
  test (1,2);
  test (A :: []);
  
  $ x;
  let z = $ X
  in [z, (force z), z];
  
  flatmap (\x -> [X, x]) [A, B, C];
  collect (\x -> if x = B then None else Some x) [A, B, C];
  /* [ if x = B then None else Some x
     | x <- [A, B, C]
     ] */

  ` x;
  ` f x;  
  
  "hello";
  'x';
   ` (==>);
end