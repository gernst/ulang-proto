define
  bind f (Success a src)
    == parse (f a) src;
  bind f Failure
    == Failure;

  map f (Success a src)
    == Success (f a) src;
  map f  Failure
    == Failure;
  
  filter p (Success a src)
    == if (p a)
       then (Success a src)
       else Failure;
  filter p Failure
    == Failure;
end


define
  parse (Parser p) src
    == p src;
  
  fail
    == Parser \_ -> Failure;
  
  return a
    == Parser \src -> Success a src;
  
  item
    == Parser \ [] -> Failure
              | (a :: src) -> Success a src;
  
  literal a
    == filter (\b -> a = b) item;
    
  bind (Parser p) f
    == Parser \src -> bind f (p src);

  map f (Parser p)
    == Parser \src -> map f (p src);

  filter p (Parser q)
    == Parser \src -> filter p (q src);
  
  (Parser p) or (Parser q)
    == Parser \src -> match (p src) with
         | Failure -> q src
         | res -> res;

  seq f p q
    == bind p \a ->
       bind q \b ->
         return (a,b);

  pair p q == seq (,) p q;
  
  src == (A :: B :: C :: []);
end

eval
  parse item src;
  parse (literal B) src;
  parse (pair item item) src;
end