definitions
  
  curry f x y == f (x, y);
  uncurry f (x, y) == f x y;
  
  fail _
    == Failure;
  
  return a src
    == Success a src;
  
  map f (Success a src) == f a src;
  map f  Failure == Failure;
  
  bind p f src
    == map f (p src);
  
  orelse (Success a src) p _ == (Success a src);
  orelse Failure p src == p src;
  
  alt p q src
    == orelse (p src) q src;
  
  item (a :: src) == Success a src;
  item [] == Failure;
  
  test a (b :: src)
    == if a = b
       then Success a src
       else Failure;
  
  test a [] == Failure;
  
  seq f p q src
    == (bind p function x ->
        bind q function y ->
        return (f x y));
  
  pair p q == seq (,) p q;
end
