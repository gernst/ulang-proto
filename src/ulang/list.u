notation
  data [] ::;
  
  infix right 10 ::;
  infix right 9 **;
  infix right 8 ++;
end

define
  // [x ...] = x :: ... Nil;

  list None = [];
  list (Some x) = [x];
  
  head (x :: xs) = x;
  tail (x :: xs) = xs;
  
  length [] = 0;
  length (_ :: xs) = length xs +1;
  
  take 0 xs = [];
  take (n +1) (x :: xs) = x :: take n xs;

  [] ++ ys = ys;
  (x :: xs) ++ ys = x :: (xs ++ ys);
  
  [] ** ys = [];
  (x :: xs) ** ys = map (\y -> (x,y)) ys ++ (xs ** ys);

  map f [] = [];
  map f (x :: xs) = (f x) :: (map f xs);
  
  collect f [] = [];
  collect f (x :: xs)
    = list (f x) ++ collect f xs;

  foldl f z [] = z;
  foldl f z (x :: xs) = foldl f (f z x) xs;

  unfoldl f (f y x) xs = unfoldl f y (x :: xs);
  unfoldl f z xs = (z, xs);

  foldr f z [] = z;
  foldr f z (x :: xs) = f x (foldr f z xs);
  
  unfoldr f (f x y) = x :: (unfoldr f y);
  unfoldr f z = z;
  
  forall p [] = True;
  forall p (x :: xs) = if not p x then False else forall p xs;
  
  exists p [] = False;
  exists p (x :: xs) = if p x then True else exists p xs;

  flatten [] = [];
  flatten ([] :: ys) = flatten ys;
  flatten ((x :: xs) :: ys) = x :: flatten (xs :: ys);
  
  zip [] [] = [];
  zip (x :: xs) (y :: ys) = (x, y) :: zip xs ys;

  unzip [] = ([], []);
  unzip (x, y) :: zs
    = let (xs, ys) = unzip zs
       in (x :: xs, y :: ys);

  filter p [] = [];
  filter p (x :: xs)
    = let ys = (filter p xs)
       in if (p x) then (x :: ys) else ys;
       
  partition p [] = ([], []);
  partition p (x :: xs)
    = let (ys,zs) = partition p xs
       in if p x then (x :: ys, zs)
                 else (ys, x :: zs);
  
  contains x [] = False;
  contains x (x :: xs) = True;
  contains x (y :: xs) = contains x xs;
  
  find p [] = None;
  find p (x :: xs) if p x = Some x;
  find p (_ :: xs) = find p xs;
       
  get _ [] = None;
  get 0      (x :: xs) = Some x;
  get (n +1) (x :: xs) = get n xs;

  index x [] = None;
  index x (x :: xs) = Some 0;
  index x (y :: xs) = index x xs +1;
  
  lookup _ [] = None;
  lookup x ((x,y) :: xs) = Some y;
  lookup x (_ :: xs) = lookup x xs;
  
  store x z xs = (x,z) :: xs;
  
  reverse [] ys = ys;
  reverse (x :: xs) ys = reverse xs (x :: ys);
  reverse xs = reverse xs [];
  
  qsort (<) []
    = [];
  qsort (<) (x :: xs)
    = let (lesser, greater) = partition (\y -> y < x) xs in
       (qsort (<) lesser) ++ [x] ++ (qsort (<) greater);
end

eval
  [1, 2, 3] ** [A, B, C];
end

test
  [0, 1, 2] ++ [3, 4] = [0, 1, 2, 3, 4]; 
  map (+1) [0, 1, 2, 3] = [1, 2, 3, 4];
  filter even [0, 1, 2, 3, 4] = [0, 2, 4];
  partition even [0, 1, 2, 3, 4] = ([0, 2, 4], [1, 3]);
  
  [1] ** [A] = [(1,A)];
  
  [1, 2, 3] ** [A, B, C] = [(1,A), (1,B), (1,C),
                             (2,A), (2,B), (2,C),
                             (3,A), (3,B), (3,C)];
  
  qsort (<) [3, 2, 1, 4, 2, 3, 1] = [1, 1, 2, 2, 3, 3, 4];
  
  A :: [B, C] = [A, B, C];
end
