grammar

case ::= expr '->' expr { Case };

cases ::= case ('|' case) * { (::) };

fun ::= 'function' cases { Function };
ite ::= 'if' expr 'then' expr 'else' expr { IfThenElse };
let ::= 'let' expr '=' expr 'in' expr { LetIn };
match ::= 'match' expr 'with' cases { MatchWith };

open ::= '(' expr ')';
closed ::= open | fun | ite | let | matches | id;
app ::= closed closed * { foldl App };

end