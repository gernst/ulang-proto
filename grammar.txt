grammar base
  id = Id '[a-zA-Z]';

grammar mixfix
  level op inner
    = Level (inner op ... inner);

  levels [] inner
    = inner;

  levels (op :: tighter) inner
    = level op (levels tighter inner);

definitions

grammar expr

case ::= expr '->' expr { Case };
cases ::= '|' ... case;

fun ::= 'function' cases { Function };
ite ::= 'if' expr 'then' expr 'else' expr { IfThenElse };
let ::= 'let' expr '=' expr 'in' expr { LetIn };

closed ::= fun | ite | let

app ::= closed closed* { foldl App };

ops == ['[+-]', '[*/]'];
    
mixfix == levels ops app;

expr == mixfix;
